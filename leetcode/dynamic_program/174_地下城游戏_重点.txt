https://leetcode.cn/problems/dungeon-game/

//该问题是个反向问题, 错误代码

        int M = dungeon.size();
        int N = dungeon[0].size();
        //0或者负数就死了;  只能向右边, 或者向下,看谁征得更小, 也就是负数最大
        //不仅考虑前一个状态, 还要考虑以前的状态
        vector<vector<int> > dp(M, vector<int>(N, 0));
        dp[0][0] = dungeon[0][0];
        for(int i=1; i<N; i++){
            dp[0][i] = dp[0][i-1] + dungeon[0][i];
        }
        for(int i = 1; i< M; ++i)
            dp[i][0] = dp[i-1][0] +dungeon[i][0];

        for(int i =1; i<M; ++i){
            for(int j =1; j<N; ++j){
                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + dungeon[i][j];
                cout <<dp[i][j]<<'\t';
            }
            cout<<endl;
        }

        return 1-dp[M-1][N-1] ;



//正确代码


class Solution {
public:
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        int M = dungeon.size();
        int N = dungeon[0].size();
        //0或者负数就死了;  只能向右边, 或者向下,看谁征得更小, 也就是负数最大
        //不仅考虑前一个状态, 还要考虑以前的状态
        vector<vector<int> > dp(M, vector<int>(N, 0));
        dp[M-1][N-1] = dungeon[M-1][N-1]>0 ? 1 : 1-dungeon[M-1][N-1];
        int res = 0;
        for(int i=N-2; i>-1; --i){
            res = dp[M-1][i+1] - dungeon[M-1][i];
            dp[M-1][i] = res <=0 ? 1 : res;

            //cout<< "finish row" <<endl;
        }
        for(int i = M-2; i>-1; --i){
            res = dp[i+1][N-1] -dungeon[i][N-1];
            dp[i][N-1] = res  <=0 ? 1: res;
            //cout <<"finish low" <<endl ;
        }


        for(int i =M-2; i>=0; --i){
            for(int j =N-2; j>=0; --j){
                res = min(dp[i+1][j], dp[i][j+1]) - dungeon[i][j];
                dp[i][j] = res<=0 ? 1 : res;
                //cout <<dp[i][j]<<'\t';
            }
            //cout<<endl;
        }
        for(int i = 0; i < M; ++i){
            for(int j = 0; j<N ; ++j){
                cout << dp[i][j] << "\t" ;
            }
            cout<< endl;
        } 

        return dp[0][0] ;

    }
};
