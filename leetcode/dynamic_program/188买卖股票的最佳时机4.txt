        int len = prices.size();
        //if(k == 0) return 0;
        if(len <=1) return 0;
        int khat = k;
        for(;khat >0; khat--){
            cout << "khat is " << khat << endl;
            if(len >= 2 *khat)
            break;
        }

        int times = 2 * khat;
        cout<<"times is "<<times<<endl;
        vector <vector <int> > dp(len, vector<int>(times, 0));
        //dp i 没有操作, 第一次买入, 第一次卖出, 第二次买入, 第二次卖出
        for(int i =0; i<times; i++){
            if(i%2 == 1) 
                dp[0][i] =0;
            else dp[0][i] = -prices[0];
        }


        for(int i =1; i <len ;i++){
            for(int j=0; j<times; j++){
                if(j == 0){
                    dp[i][j] = max(-prices[i], dp[i-1][j]);
                }
                else if(j%2 ==1 ){
                    dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + prices[i]);
                }
                else if(j%2 ==0)
                    dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] - prices[i]);
                cout<<dp[i][j]<<' ';
            }
            cout<< endl;



        }

        return dp[len-1][times-1] ;